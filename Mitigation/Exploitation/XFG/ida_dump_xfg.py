import idaapi
import idc
import idautils
import sys
import idautils, ida_funcs, ida_hexrays
import ida_nalt


__VERSION__ = '1.0'
__AUTHOR__ = 'bopin'

'''
reference from https://www.cnblogs.com/luoxian1011/p/16582325.html
'''
class FormatTable:

    def __init__(self, split_str='|'):
        # 初始化参数 >标题：title >行信息：rows >默认分隔符：split_str='|'
        self.title = self.split_str = self.title_str = None
        self.rows = []
        self.set_split(split_str)
        # >系统架构：sysVersion > python版本：py_version
        self.sysVersion = sys.platform
        self.py_version = sys.version[0]
        if self.py_version == '2':
            reload(sys)
            sys.setdefaultencoding('utf8')

    def str_len(self, check_str):
        # 汉字计数器，每个汉字宽度+1；返回需要增加的宽度
        if self.py_version == '2':
            return sum((1 for ch in check_str.decode('utf-8') if u'\u4e00' <= ch <= u'\u9fff'))
        else:
            return sum((1 for ch in check_str if u'\u4e00' <= ch <= u'\u9fff'))

    def set_title(self, title):
        # 设置标题，并添加到行信息
        self.title = title
        self.rows.append(title)

    def add_row(self, row):
        # 添加行信息，字段不足自动补齐'None'
        diff = len(self.title) - len(row)
        if diff > 0:
            row.extend(['None' for i in range(diff)])
        self.rows.append(row)

    def get_max_wide(self):
        # 计算表格 纵列最大宽度
        return [max(len(ele.encode('utf-8')) for ele in i) for i in zip(*self.rows)]

    def set_split(self, split_str):
        # 设置分隔符
        self.split_str = split_str
        # 标题分隔符，单字符默认为+，超过单字符即设置为split_str
        self.title_str = '+' if len(self.split_str) == 1 else self.split_str

    def show(self):
        # 输出表格信息
        split_len = 2
        max_index_list = self.get_max_wide()
        # print(max_index_list)
        # 格式化分隔符（i + split_len：列间距）
        lab_format = ['{0:-^%s}' % (i + split_len) for i in max_index_list]
        lab_print = '{0}{1}{0}'.format(self.title_str, self.title_str.join([f.format('-') for f in lab_format]))
        # 格式化行信息（t +/- self.str_len(i) + 2：列宽）
        for row in self.rows:
            # linux: + \ windows: -（汉字宽度调整）
            if self.sysVersion == 'win32':
                row_format = ['{0:^%s}' % (t - self.str_len(i) + 2) for t, i in zip(max_index_list, row)]
            else:
                row_format = ['{0:^%s}' % (t + self.str_len(i) + 2) for t, i in zip(max_index_list, row)]
            row_print = '{0}{1}{0}'.format(
                self.split_str, self.split_str.join([f.format(r) for f, r in zip(row_format, row)]))
            if row == self.title:
                print('{0}\n{1}\n{0}'.format(lab_print, row_print))
            else:
                print(row_print)
        print(lab_print)

class dump_xfg_func():
    """
    ida python plugin for dump the current module xfg functions information
    format below:
    function_name   function_addr   xfg_hash  
    """
    def __init__(self) -> None:
        self.table = FormatTable()
        self.table.set_title(['Name', 'Addr', 'Hash'])
        self.count = 0
    def run(self):
        for function_ea in idautils.Functions():
            try:
                function_name = idaapi.get_func_name(function_ea)
                function_start = hex(function_ea)
                if self._check_hash(idc.get_qword(function_ea - 8)):
                    self.table.add_row([function_name,function_start,hex(idc.get_qword(function_ea - 8))])
            except:
                pass
    def _check_hash(self,hash):
        '''
        skip __security_check_cookie; _guard_disaptch_icall_nop; _guard_xfg_dispatch_icall_nop
        '''
        if hash < 0xffffff:
            return True
        if hash & 0x0303030303030303 > 0xffff:
            return True
        return False

class xfg_plugin(idaapi.plugin_t):
    flags = idaapi.PLUGIN_UNL
    comment = (
        "dump xfg"
    )
    help = ""
    wanted_name = "dump xfg hash"
    wanted_hotkey = "Ctrl-Shift-X"

    def init(self):
        return idaapi.PLUGIN_KEEP

    def run(self, args):
        xfg = dump_xfg_func()
        xfg.run()
        xfg.table.show()
        return

    def term(self):
        pass

def PLUGIN_ENTRY():
    return xfg_plugin()
